plugins {
    id "org.jetbrains.intellij" version "0.1.10"
    id 'net.minecrell.licenser' version '0.3'
}

apply plugin: "idea"
apply plugin: "org.jetbrains.intellij"
apply plugin: "java"

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
}

sourceSets {
    main.java.srcDirs += "gen"
}

intellij {
    // IntelliJ IDEA dependency
    version project.hasProperty("intellijVersion") ? project.getProperty("intellijVersion") : ideaVersion
    // Bundled plugin dependencies
    plugins = ["maven", "gradle", "Groovy", "yaml"]
    pluginName "Minecraft Development"
    updateSinceUntilBuild false

    downloadSources Boolean.valueOf(downloadIdeaSources)
    sandboxDirectory project.rootDir.canonicalPath + "/.sandbox"
}

idea {
    project {
        jdkName = 1.8
        languageLevel = 1.8
    }

    module {
        generatedSourceDirs += file("gen")
        excludeDirs += file(".sandbox");
    }
}

group "com.demonwav.minecraft-dev"
version pluginVersion

task initProp << {
    def baseProp = file("src/main/resources/messages.MinecraftDevelopment_en.properties")
    def baseEnglishProp = file("src/main/resources/messages.MinecraftDevelopment.properties")

    def comment =
            "# Do not manually edit this file\n"
            "# This file is automatically copied from messages.MinecraftDevelopment_en_US.properties at build time\n"

    def baseUsEnglishProp = file("src/main/resources/messages.MinecraftDevelopment_en_US.properties")

    baseProp.write comment + baseUsEnglishProp.text
    baseEnglishProp.write comment + baseUsEnglishProp.text
}

// Credit for this intellij-rust https://github.com/intellij-rust/intellij-rust/blob/master/build.gradle#L114
def lexerConfig(src, dst, lexerFileName) {
    return {
        classpath = files("libs/jflex-1.7.0-SNAPSHOT.jar")
        main = "jflex.Main"

        args = ["--skel",   "libs/idea-flex.skeleton",
                "-d",       dst,
                src
        ]

        inputs  .file   file(src)
        outputs .dir    file(dst + lexerFileName)
    }
}

task generateCfgLexer(type: JavaExec) {
    configure lexerConfig(
            "src/main/java/com/demonwav/mcdev/platform/mcp/at/AT.flex",
            "gen/com/demonwav/mcdev/platform/mcp/at/",
            "AtLexer.java"
    )
}

task generateCfgPsiAndParser(type: JavaExec) {
    doFirst {
        delete file("gen/com/demonwav/mcdev/platform/mcp/at/psi/")
    }
    ext.src     = "src/main/java/com/demonwav/mcdev/platform/mcp/at/AT.bnf"
    ext.dstRoot = "gen"

    main = "org.intellij.grammar.Main"

    args = [ dstRoot, file(src) ]

    inputs  .file   file(src)
    outputs .dir    fileTree(dir: dstRoot + "/com/demonwav/mcdev/platform/mcp/at/", include: "**/*.java")

    classpath(configurations.compile, file("libs/grammar-kit.jar"))
}

task generate {
    dependsOn generateCfgLexer, generateCfgPsiAndParser
}

compileJava.dependsOn generate

// License header formatting
license {
    header = file("copyright.txt")
    include "**/*.java", "**/*.gradle", "**/*.xml", "**/*.properties", "**/*.html"

    newLine = true
}

afterEvaluate {
    prepareSandbox.dependsOn initProp
}
